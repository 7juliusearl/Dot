/*
  # Fix manually created users with fake subscription data
  
  1. Problem
    - Users manually fixed have fake subscription_ids that don't exist in Stripe
    - Some have invalid subscription_status values like 'completed' 
    - This causes "No such subscription" and enum errors
  
  2. Solution
    - For monthly users: Clear fake subscription data, let them work without Stripe sync
    - Set proper subscription_status values
    - Monthly users can still cancel (we'll handle locally)
*/

-- Check current problematic data
SELECT 
  'Users with fake subscription IDs and invalid status:' as info;

SELECT 
  sc.email,
  so.subscription_id,
  so.subscription_status,
  so.purchase_type,
  CASE 
    WHEN so.subscription_id LIKE 'sub_%' AND LENGTH(so.subscription_id) > 20 AND so.subscription_id NOT LIKE 'sub_1%' 
    THEN 'FAKE ID (generated by migration)'
    WHEN so.subscription_status NOT IN ('active', 'canceled', 'past_due', 'trialing', 'incomplete', 'unpaid')
    THEN 'INVALID STATUS'
    ELSE 'OK'
  END as issue_type
FROM stripe_orders so
JOIN stripe_customers sc ON so.customer_id = sc.customer_id
WHERE so.purchase_type = 'monthly'
  AND so.status = 'completed'
  AND so.deleted_at IS NULL
  AND (
    -- Fake subscription IDs (generated, not real Stripe IDs)
    (so.subscription_id LIKE 'sub_%' AND LENGTH(so.subscription_id) > 20 AND so.subscription_id NOT LIKE 'sub_1%')
    OR
    -- Invalid subscription status values
    so.subscription_status NOT IN ('active', 'canceled', 'past_due', 'trialing', 'incomplete', 'unpaid', 'incomplete_expired', 'not_started', 'paused')
  );

-- Fix the problematic data
-- For monthly users with fake subscription IDs: set to NULL (they can still cancel locally)
-- Fix invalid subscription_status values
UPDATE stripe_orders
SET 
  subscription_id = CASE 
    -- Keep real Stripe subscription IDs (start with sub_1)
    WHEN subscription_id LIKE 'sub_1%' THEN subscription_id
    -- Clear fake generated IDs
    ELSE NULL
  END,
  subscription_status = CASE 
    -- Fix common invalid values
    WHEN subscription_status = 'completed' THEN 'active'
    WHEN subscription_status IS NULL THEN 'active'
    WHEN subscription_status NOT IN ('active', 'canceled', 'past_due', 'trialing', 'incomplete', 'unpaid', 'incomplete_expired', 'not_started', 'paused') THEN 'active'
    -- Keep valid values
    ELSE subscription_status
  END,
  updated_at = NOW()
WHERE purchase_type = 'monthly'
  AND status = 'completed'
  AND deleted_at IS NULL
  AND (
    -- Has fake subscription ID
    (subscription_id LIKE 'sub_%' AND LENGTH(subscription_id) > 20 AND subscription_id NOT LIKE 'sub_1%')
    OR
    -- Has invalid subscription status
    subscription_status NOT IN ('active', 'canceled', 'past_due', 'trialing', 'incomplete', 'unpaid', 'incomplete_expired', 'not_started', 'paused')
    OR subscription_status IS NULL
  );

-- Show the fixed data
SELECT 
  'FIXED - Users now have clean data:' as info;

SELECT 
  sc.email,
  so.subscription_id,
  so.subscription_status,
  so.cancel_at_period_end,
  'Fixed - will not cause sync errors' as status
FROM stripe_orders so
JOIN stripe_customers sc ON so.customer_id = sc.customer_id
WHERE so.purchase_type = 'monthly'
  AND so.status = 'completed'
  AND so.deleted_at IS NULL
  AND so.updated_at > NOW() - INTERVAL '5 minutes'
ORDER BY so.updated_at DESC;

-- Log the fix
INSERT INTO sync_logs (customer_id, operation, status, details)
VALUES (
  'SYSTEM',
  'fix_manually_created_users',
  'completed',
  jsonb_build_object(
    'action', 'cleaned_fake_subscription_ids_and_invalid_enum_values',
    'timestamp', NOW(),
    'users_fixed', (
      SELECT COUNT(*) 
      FROM stripe_orders 
      WHERE purchase_type = 'monthly'
      AND updated_at > NOW() - INTERVAL '5 minutes'
    ),
    'reason', 'prevent_no_such_subscription_and_enum_errors'
  )
); 